package parquetHandler

import (
	"github.com/kine-dmd/s3-lambda-consumer/appleWatch3Row"
	"math/rand"
	"runtime"
	"testing"
)

/** Validity tests **/

func TestManyRowsDoesntCrash(t *testing.T) {
	// Check processing doesn't crash - proves nothing about output
	_, err := ConvertToParquetFile(MakeRandomRows(1000000), runtime.NumCPU())
	if err != nil {
		t.Fatalf("Crashed during processing large number of rows.")
	}
}

/** Regression tests **/

func TestSingleRow(t *testing.T) {
	// Expected value obtained from previous run - for regression testing only
	expected := []byte{80, 65, 82, 49, 21, 0, 21, 16, 21, 20, 44, 21, 2, 21, 0, 21, 6, 21, 6, 28, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 28, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 21, 16, 21, 20, 44, 21, 2, 21, 0, 21, 6, 21, 6, 28, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 28, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 21, 16, 21, 20, 44, 21, 2, 21, 0, 21, 6, 21, 6, 28, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 28, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 21, 16, 21, 20, 44, 21, 2, 21, 0, 21, 6, 21, 6, 28, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 28, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 21, 16, 21, 20, 44, 21, 2, 21, 0, 21, 6, 21, 6, 28, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 28, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 21, 16, 21, 20, 44, 21, 2, 21, 0, 21, 6, 21, 6, 28, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 28, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 21, 16, 21, 20, 44, 21, 2, 21, 0, 21, 6, 21, 6, 28, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 28, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 21, 16, 21, 20, 44, 21, 2, 21, 0, 21, 6, 21, 6, 28, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 28, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 21, 16, 21, 20, 44, 21, 2, 21, 0, 21, 6, 21, 6, 28, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 28, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 21, 16, 21, 20, 44, 21, 2, 21, 0, 21, 6, 21, 6, 28, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 28, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 21, 16, 21, 20, 44, 21, 2, 21, 0, 21, 6, 21, 6, 28, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 28, 0, 0, 0, 0, 0, 0, 0, 0, 21, 2, 25, 204, 53, 0, 24, 15, 112, 97, 114, 113, 117, 101, 116, 95, 103, 111, 95, 114, 111, 111, 116, 21, 22, 0, 21, 4, 21, 0, 21, 0, 24, 2, 116, 115, 37, 28, 21, 0, 21, 0, 21, 0, 0, 21, 10, 21, 0, 21, 0, 24, 2, 114, 120, 53, 0, 21, 0, 21, 0, 0, 21, 10, 21, 0, 21, 0, 24, 2, 114, 121, 53, 0, 21, 0, 21, 0, 0, 21, 10, 21, 0, 21, 0, 24, 2, 114, 122, 53, 0, 21, 0, 21, 0, 0, 21, 10, 21, 0, 21, 0, 24, 2, 114, 108, 53, 0, 21, 0, 21, 0, 0, 21, 10, 21, 0, 21, 0, 24, 2, 112, 116, 53, 0, 21, 0, 21, 0, 0, 21, 10, 21, 0, 21, 0, 24, 2, 121, 119, 53, 0, 21, 0, 21, 0, 0, 21, 10, 21, 0, 21, 0, 24, 2, 97, 120, 53, 0, 21, 0, 21, 0, 0, 21, 10, 21, 0, 21, 0, 24, 2, 97, 121, 53, 0, 21, 0, 21, 0, 0, 21, 10, 21, 0, 21, 0, 24, 2, 97, 122, 53, 0, 21, 0, 21, 0, 0, 21, 10, 21, 0, 21, 0, 24, 2, 104, 114, 53, 0, 21, 0, 21, 0, 0, 22, 2, 25, 28, 25, 188, 38, 8, 28, 21, 4, 25, 53, 6, 8, 0, 25, 24, 2, 116, 115, 21, 2, 22, 2, 22, 94, 22, 98, 38, 8, 60, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 106, 28, 21, 10, 25, 53, 6, 8, 0, 25, 24, 2, 114, 120, 21, 2, 22, 2, 22, 94, 22, 98, 38, 106, 60, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 204, 1, 28, 21, 10, 25, 53, 6, 8, 0, 25, 24, 2, 114, 121, 21, 2, 22, 2, 22, 94, 22, 98, 38, 204, 1, 60, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 174, 2, 28, 21, 10, 25, 53, 6, 8, 0, 25, 24, 2, 114, 122, 21, 2, 22, 2, 22, 94, 22, 98, 38, 174, 2, 60, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 144, 3, 28, 21, 10, 25, 53, 6, 8, 0, 25, 24, 2, 114, 108, 21, 2, 22, 2, 22, 94, 22, 98, 38, 144, 3, 60, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 242, 3, 28, 21, 10, 25, 53, 6, 8, 0, 25, 24, 2, 112, 116, 21, 2, 22, 2, 22, 94, 22, 98, 38, 242, 3, 60, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 212, 4, 28, 21, 10, 25, 53, 6, 8, 0, 25, 24, 2, 121, 119, 21, 2, 22, 2, 22, 94, 22, 98, 38, 212, 4, 60, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 182, 5, 28, 21, 10, 25, 53, 6, 8, 0, 25, 24, 2, 97, 120, 21, 2, 22, 2, 22, 94, 22, 98, 38, 182, 5, 60, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 152, 6, 28, 21, 10, 25, 53, 6, 8, 0, 25, 24, 2, 97, 121, 21, 2, 22, 2, 22, 94, 22, 98, 38, 152, 6, 60, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 250, 6, 28, 21, 10, 25, 53, 6, 8, 0, 25, 24, 2, 97, 122, 21, 2, 22, 2, 22, 94, 22, 98, 38, 250, 6, 60, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 220, 7, 28, 21, 10, 25, 53, 6, 8, 0, 25, 24, 2, 104, 114, 21, 2, 22, 2, 22, 94, 22, 98, 38, 220, 7, 60, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 138, 8, 22, 2, 0, 0, 17, 3, 0, 0, 80, 65, 82, 49}

	// Compress a single row and check the output
	actual, err := ConvertToParquetFile([]appleWatch3Row.AppleWatch3Row{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, 1)
	compareResults(t, err, expected, actual)
}

func TestMultipleRows(t *testing.T) {
	// Expected value obtained from previous run - for regression testing only
	expected := []byte{80, 65, 82, 49, 21, 0, 21, 112, 21, 76, 44, 21, 14, 21, 0, 21, 6, 21, 6, 28, 24, 8, 6, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 13, 1, 0, 1, 13, 8, 0, 2, 13, 8, 0, 3, 13, 8, 0, 4, 13, 8, 60, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 21, 0, 21, 112, 21, 68, 44, 21, 14, 21, 0, 21, 6, 21, 6, 28, 24, 8, 0, 0, 0, 0, 0, 0, 24, 64, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 50, 1, 0, 4, 240, 63, 13, 15, 0, 64, 9, 8, 0, 8, 13, 8, 0, 16, 13, 8, 36, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 21, 0, 21, 112, 21, 68, 44, 21, 14, 21, 0, 21, 6, 21, 6, 28, 24, 8, 0, 0, 0, 0, 0, 0, 24, 64, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 50, 1, 0, 4, 240, 63, 13, 15, 0, 64, 9, 8, 0, 8, 13, 8, 0, 16, 13, 8, 36, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 21, 0, 21, 112, 21, 68, 44, 21, 14, 21, 0, 21, 6, 21, 6, 28, 24, 8, 0, 0, 0, 0, 0, 0, 24, 64, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 50, 1, 0, 4, 240, 63, 13, 15, 0, 64, 9, 8, 0, 8, 13, 8, 0, 16, 13, 8, 36, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 21, 0, 21, 112, 21, 68, 44, 21, 14, 21, 0, 21, 6, 21, 6, 28, 24, 8, 0, 0, 0, 0, 0, 0, 24, 64, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 50, 1, 0, 4, 240, 63, 13, 15, 0, 64, 9, 8, 0, 8, 13, 8, 0, 16, 13, 8, 36, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 21, 0, 21, 112, 21, 68, 44, 21, 14, 21, 0, 21, 6, 21, 6, 28, 24, 8, 0, 0, 0, 0, 0, 0, 24, 64, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 50, 1, 0, 4, 240, 63, 13, 15, 0, 64, 9, 8, 0, 8, 13, 8, 0, 16, 13, 8, 36, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 21, 0, 21, 112, 21, 68, 44, 21, 14, 21, 0, 21, 6, 21, 6, 28, 24, 8, 0, 0, 0, 0, 0, 0, 24, 64, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 50, 1, 0, 4, 240, 63, 13, 15, 0, 64, 9, 8, 0, 8, 13, 8, 0, 16, 13, 8, 36, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 21, 0, 21, 112, 21, 68, 44, 21, 14, 21, 0, 21, 6, 21, 6, 28, 24, 8, 0, 0, 0, 0, 0, 0, 24, 64, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 50, 1, 0, 4, 240, 63, 13, 15, 0, 64, 9, 8, 0, 8, 13, 8, 0, 16, 13, 8, 36, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 21, 0, 21, 112, 21, 68, 44, 21, 14, 21, 0, 21, 6, 21, 6, 28, 24, 8, 0, 0, 0, 0, 0, 0, 24, 64, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 50, 1, 0, 4, 240, 63, 13, 15, 0, 64, 9, 8, 0, 8, 13, 8, 0, 16, 13, 8, 36, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 21, 0, 21, 112, 21, 68, 44, 21, 14, 21, 0, 21, 6, 21, 6, 28, 24, 8, 0, 0, 0, 0, 0, 0, 24, 64, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 50, 1, 0, 4, 240, 63, 13, 15, 0, 64, 9, 8, 0, 8, 13, 8, 0, 16, 13, 8, 36, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 21, 0, 21, 112, 21, 68, 44, 21, 14, 21, 0, 21, 6, 21, 6, 28, 24, 8, 0, 0, 0, 0, 0, 0, 24, 64, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 50, 1, 0, 4, 240, 63, 13, 15, 0, 64, 9, 8, 0, 8, 13, 8, 0, 16, 13, 8, 36, 20, 64, 0, 0, 0, 0, 0, 0, 24, 64, 21, 2, 25, 204, 53, 0, 24, 15, 112, 97, 114, 113, 117, 101, 116, 95, 103, 111, 95, 114, 111, 111, 116, 21, 22, 0, 21, 4, 21, 0, 21, 0, 24, 2, 116, 115, 37, 28, 21, 0, 21, 0, 21, 0, 0, 21, 10, 21, 0, 21, 0, 24, 2, 114, 120, 53, 0, 21, 0, 21, 0, 0, 21, 10, 21, 0, 21, 0, 24, 2, 114, 121, 53, 0, 21, 0, 21, 0, 0, 21, 10, 21, 0, 21, 0, 24, 2, 114, 122, 53, 0, 21, 0, 21, 0, 0, 21, 10, 21, 0, 21, 0, 24, 2, 114, 108, 53, 0, 21, 0, 21, 0, 0, 21, 10, 21, 0, 21, 0, 24, 2, 112, 116, 53, 0, 21, 0, 21, 0, 0, 21, 10, 21, 0, 21, 0, 24, 2, 121, 119, 53, 0, 21, 0, 21, 0, 0, 21, 10, 21, 0, 21, 0, 24, 2, 97, 120, 53, 0, 21, 0, 21, 0, 0, 21, 10, 21, 0, 21, 0, 24, 2, 97, 121, 53, 0, 21, 0, 21, 0, 0, 21, 10, 21, 0, 21, 0, 24, 2, 97, 122, 53, 0, 21, 0, 21, 0, 0, 21, 10, 21, 0, 21, 0, 24, 2, 104, 114, 53, 0, 21, 0, 21, 0, 0, 22, 14, 25, 28, 25, 188, 38, 8, 28, 21, 4, 25, 53, 6, 8, 0, 25, 24, 2, 116, 115, 21, 2, 22, 14, 22, 190, 1, 22, 154, 1, 38, 8, 60, 24, 8, 6, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 162, 1, 28, 21, 10, 25, 53, 6, 8, 0, 25, 24, 2, 114, 120, 21, 2, 22, 14, 22, 190, 1, 22, 146, 1, 38, 162, 1, 60, 24, 8, 0, 0, 0, 0, 0, 0, 24, 64, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 180, 2, 28, 21, 10, 25, 53, 6, 8, 0, 25, 24, 2, 114, 121, 21, 2, 22, 14, 22, 190, 1, 22, 146, 1, 38, 180, 2, 60, 24, 8, 0, 0, 0, 0, 0, 0, 24, 64, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 198, 3, 28, 21, 10, 25, 53, 6, 8, 0, 25, 24, 2, 114, 122, 21, 2, 22, 14, 22, 190, 1, 22, 146, 1, 38, 198, 3, 60, 24, 8, 0, 0, 0, 0, 0, 0, 24, 64, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 216, 4, 28, 21, 10, 25, 53, 6, 8, 0, 25, 24, 2, 114, 108, 21, 2, 22, 14, 22, 190, 1, 22, 146, 1, 38, 216, 4, 60, 24, 8, 0, 0, 0, 0, 0, 0, 24, 64, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 234, 5, 28, 21, 10, 25, 53, 6, 8, 0, 25, 24, 2, 112, 116, 21, 2, 22, 14, 22, 190, 1, 22, 146, 1, 38, 234, 5, 60, 24, 8, 0, 0, 0, 0, 0, 0, 24, 64, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 252, 6, 28, 21, 10, 25, 53, 6, 8, 0, 25, 24, 2, 121, 119, 21, 2, 22, 14, 22, 190, 1, 22, 146, 1, 38, 252, 6, 60, 24, 8, 0, 0, 0, 0, 0, 0, 24, 64, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 142, 8, 28, 21, 10, 25, 53, 6, 8, 0, 25, 24, 2, 97, 120, 21, 2, 22, 14, 22, 190, 1, 22, 146, 1, 38, 142, 8, 60, 24, 8, 0, 0, 0, 0, 0, 0, 24, 64, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 160, 9, 28, 21, 10, 25, 53, 6, 8, 0, 25, 24, 2, 97, 121, 21, 2, 22, 14, 22, 190, 1, 22, 146, 1, 38, 160, 9, 60, 24, 8, 0, 0, 0, 0, 0, 0, 24, 64, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 178, 10, 28, 21, 10, 25, 53, 6, 8, 0, 25, 24, 2, 97, 122, 21, 2, 22, 14, 22, 190, 1, 22, 146, 1, 38, 178, 10, 60, 24, 8, 0, 0, 0, 0, 0, 0, 24, 64, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 196, 11, 28, 21, 10, 25, 53, 6, 8, 0, 25, 24, 2, 104, 114, 21, 2, 22, 14, 22, 190, 1, 22, 146, 1, 38, 196, 11, 60, 24, 8, 0, 0, 0, 0, 0, 0, 24, 64, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 170, 16, 22, 14, 0, 0, 41, 3, 0, 0, 80, 65, 82, 49}

	// Compress a a few rows and compare the output
	actual, err := ConvertToParquetFile([]appleWatch3Row.AppleWatch3Row{
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
	}, 1)

	compareResults(t, err, expected, actual)
}

/** Benchmarks **/

func BenchmarkParquetFile100(b *testing.B) {
	benchmarkParquetFile(100, b)
}

func BenchmarkParquetFile1000(b *testing.B) {
	benchmarkParquetFile(1000, b)
}

func BenchmarkParquetFile10000(b *testing.B) {
	benchmarkParquetFile(10000, b)
}

func BenchmarkParquetFile100000(b *testing.B) {
	benchmarkParquetFile(100000, b)
}

func BenchmarkParquetFile1000000(b *testing.B) {
	benchmarkParquetFile(1000000, b)
}

func BenchmarkParquetFile10000000(b *testing.B) {
	benchmarkParquetFile(10000000, b)
}

func BenchmarkParquetFile1hr(b *testing.B) {
	benchmarkParquetFile(60*60*100, b)
}

func benchmarkParquetFile(numRows int, b *testing.B) {
	// Make some fixed number of rows.
	rows := MakeRandomRows(numRows)

	// Repeat the process of converting rows until stable time convergence
	for n := 0; n < b.N; n++ {
		_, _ = ConvertToParquetFile(rows, runtime.NumCPU())
	}
}

/** Helper functions **/

func compareResults(t *testing.T, err error, expected []byte, actual []byte) {
	if err != nil {
		t.Fatalf("Error returned during conversion: %s", err)
	}

	if len(expected) != len(actual) {
		t.Fatalf("Expected result length not equal to actual. Expected length %d. Got length %d.", len(expected), len(actual))
	}

	for i := range expected {
		if expected[i] != actual[i] {
			t.Fatalf("Byte %d does not match. Expected %b, got %b", i, expected[i], actual[i])
		}
	}
}

func MakeRandomRow() appleWatch3Row.AppleWatch3Row {
	return appleWatch3Row.AppleWatch3Row{
		Ts: rand.Uint64(),
		Rx: rand.Float64(),
		Ry: rand.Float64(),
		Rz: rand.Float64(),
		Rl: rand.Float64(),
		Pt: rand.Float64(),
		Yw: rand.Float64(),
		Ax: rand.Float64(),
		Ay: rand.Float64(),
		Az: rand.Float64(),
		Hr: rand.Float64(),
	}
}

func MakeRandomRows(n int) []appleWatch3Row.AppleWatch3Row {
	aw3rows := make([]appleWatch3Row.AppleWatch3Row, n)
	for i := range aw3rows {
		aw3rows[i] = MakeRandomRow()
	}
	return aw3rows
}
